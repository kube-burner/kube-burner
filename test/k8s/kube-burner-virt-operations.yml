jobs:

  # create the VMs in stopped state
  - name: kubevirt-ops
    jobType: create
    jobIterations: 1
    qps: 20
    burst: 20
    namespace: kubevirt-ops
    verifyObjects: true
    errorOnVerify: true
    waitWhenFinished: true
    jobPause: 10s
    # cleanup cleans previous execution (not deleted or failed)
    cleanup: true
    objects:

    - objectTemplate: objectTemplates/vm-ephemeral.yml
      replicas: 1
      inputVars:
        name: kubevirt-ops
        image: quay.io/kubevirt/fedora-with-test-tooling-container-disk:v0.48.1
        OS: fedora27
        cpuCores: 1
        memory: 64Mi
        createVMI: true

  - name: power-management
    jobType: kubevirt
    qps: 20
    burst: 20
    jobIterations: 2
    objectDelay: 1m
    objectWait: true
    waitWhenFinished: false
    objects:
    - kubeVirtOp: stop
      labelSelector:
        kube-burner-job: kubevirt-ops
      waitOptions:
        labelSelector:
          kube-burner-job: kubevirt-ops
        customStatusPaths:
        - key:   "(.conditions.[] | select(.type == \"Ready\")).status"
          value: "False"
    - kubeVirtOp: start
      labelSelector:
        kube-burner-job: kubevirt-ops
      waitOptions:
        labelSelector:
          kube-burner-job: kubevirt-ops
        customStatusPaths:
        - key:   "(.conditions.[] | select(.type == \"Ready\")).status"
          value: "True"
    - kubeVirtOp: restart
      labelSelector:
        kube-burner-job: kubevirt-ops
      # Do not wait for the completion as there is currently no way to check it
      wait: false
    - kubeVirtOp: pause
      labelSelector:
        kube-burner-job: kubevirt-ops
      waitOptions:
        labelSelector:
          kube-burner-job: kubevirt-ops
        customStatusPaths:
        - key:   "(.conditions.[] | select(.type == \"Paused\")).status"
          value: "True"
    - kubeVirtOp: unpause
      labelSelector:
        kube-burner-job: kubevirt-ops
      waitOptions:
        labelSelector:
          kube-burner-job: kubevirt-ops
        customStatusPaths:
        - key:   "(.conditions.[] | select(.type == \"Ready\")).status"
          value: "True"
    - kubeVirtOp: stop
      labelSelector:
        kube-burner-job: kubevirt-ops
      inputVars:
        force: true
      waitOptions:
        labelSelector:
          kube-burner-job: kubevirt-ops
        customStatusPaths:
        - key:   "(.conditions.[] | select(.type == \"Ready\")).status"
          value: "False"
    - kubeVirtOp: start
      labelSelector:
        kube-burner-job: kubevirt-ops
      inputVars:
        startPaused: true
      waitOptions:
        labelSelector:
          kube-burner-job: kubevirt-ops
        customStatusPaths:
        - key:   "(.conditions.[] | select(.type == \"Paused\")).status"
          value: "True"
    - kubeVirtOp: unpause
      labelSelector:
        kube-burner-job: kubevirt-ops
      inputVars:
        force: true
      waitOptions:
        labelSelector:
          kube-burner-job: kubevirt-ops
        customStatusPaths:
        - key:   "(.conditions.[] | select(.type == \"Ready\")).status"
          value: "True"
    - kubeVirtOp: migrate
      labelSelector:
        kube-burner-job: kubevirt-ops
      # Do not wait for the completion as there is currently no way to check it
      wait: false

  # cleanup the experiment
  - name: delete-vms
    jobType: delete
    waitForDeletion: true
    qps: 5
    burst: 10
    objects:

    - kind: VirtualMachine
      labelSelector: {kube-burner-job: kubevirt-ops}
      apiVersion: kubevirt.io/v1

    - kind: Namespace
      labelSelector: {kube-burner-job: kubevirt-ops}
