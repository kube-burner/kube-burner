name: CI Parallel Tests
on:
  workflow_call:
    inputs:
      k8s-version:
        required: true
        type: string

# Cancel previous runs for the same K8s version
concurrency:
  group: ci-parallel-${{ inputs.k8s-version }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    strategy:
      matrix:
        test-group:
          - "churn"
          - "gc"
          - "indexing"
          - "kubeconfig"
          - "kubevirt"
          - "alert"
          - "crd"
          - "delete"
          - "read"
          - "sequential"
          - "userdata"
          - "datavolume"
          - "metrics"
      fail-fast: false
      max-parallel: 6
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          ref: ${{ github.event.pull_request.head.sha }}
          persist-credentials: false

      - name: Download kube-burner binary
        uses: actions/download-artifact@v4
        with:
          name: kube-burner
          path: /tmp/

      - name: Install bats
        uses: bats-core/bats-action@3.0.1
        with:
          bats-version: 1.10.0
          support-install: false
          assert-install: false
          detik-install: false
          file-install: false

      - name: Make binary executable
        run: chmod +x /tmp/kube-burner

      - name: Run bats tests for ${{ matrix.test-group }}
        timeout-minutes: 30
        run: |
          set -euo pipefail
          echo "Starting test group: ${{ matrix.test-group }}"
          echo "K8s version: ${{ inputs.k8s-version }}"
          make test-group-${{ matrix.test-group }} TEST_BINARY=/tmp/kube-burner TEST_TIMEOUT=1800
        env:
          TERM: linux
          KIND_VERSION: v0.19.0
          K8S_VERSION: ${{ inputs.k8s-version }}
          PERFSCALE_PROD_ES_SERVER: ${{ secrets.PERFSCALE_PROD_ES_SERVER }}

      - name: Cleanup on failure
        if: failure()
        run: |
          echo "Test group ${{ matrix.test-group }} failed, cleaning up..."
          kubectl get pods --all-namespaces --show-labels || true
          kubectl get events --all-namespaces --sort-by='.lastTimestamp' || true
          docker ps -a || true
          docker system df || true
